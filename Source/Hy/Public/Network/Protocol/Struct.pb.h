// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class hyps_object_info;
struct hyps_object_infoDefaultTypeInternal;
extern hyps_object_infoDefaultTypeInternal _hyps_object_info_default_instance_;
class hyps_pos_info;
struct hyps_pos_infoDefaultTypeInternal;
extern hyps_pos_infoDefaultTypeInternal _hyps_pos_info_default_instance_;
class hyps_user_info;
struct hyps_user_infoDefaultTypeInternal;
extern hyps_user_infoDefaultTypeInternal _hyps_user_info_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::hyps_object_info* Arena::CreateMaybeMessage<::Protocol::hyps_object_info>(Arena*);
template<> ::Protocol::hyps_pos_info* Arena::CreateMaybeMessage<::Protocol::hyps_pos_info>(Arena*);
template<> ::Protocol::hyps_user_info* Arena::CreateMaybeMessage<::Protocol::hyps_user_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class hyps_user_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.hyps_user_info) */ {
 public:
  inline hyps_user_info() : hyps_user_info(nullptr) {}
  ~hyps_user_info() override;
  explicit PROTOBUF_CONSTEXPR hyps_user_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hyps_user_info(const hyps_user_info& from);
  hyps_user_info(hyps_user_info&& from) noexcept
    : hyps_user_info() {
    *this = ::std::move(from);
  }

  inline hyps_user_info& operator=(const hyps_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline hyps_user_info& operator=(hyps_user_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hyps_user_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const hyps_user_info* internal_default_instance() {
    return reinterpret_cast<const hyps_user_info*>(
               &_hyps_user_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(hyps_user_info& a, hyps_user_info& b) {
    a.Swap(&b);
  }
  inline void Swap(hyps_user_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hyps_user_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hyps_user_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hyps_user_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const hyps_user_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const hyps_user_info& from) {
    hyps_user_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hyps_user_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.hyps_user_info";
  }
  protected:
  explicit hyps_user_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kUserTypeFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .Protocol.hype_user user_type = 3;
  void clear_user_type();
  ::Protocol::hype_user user_type() const;
  void set_user_type(::Protocol::hype_user value);
  private:
  ::Protocol::hype_user _internal_user_type() const;
  void _internal_set_user_type(::Protocol::hype_user value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.hyps_user_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t id_;
    int user_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class hyps_pos_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.hyps_pos_info) */ {
 public:
  inline hyps_pos_info() : hyps_pos_info(nullptr) {}
  ~hyps_pos_info() override;
  explicit PROTOBUF_CONSTEXPR hyps_pos_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hyps_pos_info(const hyps_pos_info& from);
  hyps_pos_info(hyps_pos_info&& from) noexcept
    : hyps_pos_info() {
    *this = ::std::move(from);
  }

  inline hyps_pos_info& operator=(const hyps_pos_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline hyps_pos_info& operator=(hyps_pos_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hyps_pos_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const hyps_pos_info* internal_default_instance() {
    return reinterpret_cast<const hyps_pos_info*>(
               &_hyps_pos_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(hyps_pos_info& a, hyps_pos_info& b) {
    a.Swap(&b);
  }
  inline void Swap(hyps_pos_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hyps_pos_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hyps_pos_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hyps_pos_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const hyps_pos_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const hyps_pos_info& from) {
    hyps_pos_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hyps_pos_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.hyps_pos_info";
  }
  protected:
  explicit hyps_pos_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
    kMoveStateFieldNumber = 6,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.hype_move_state move_state = 6;
  void clear_move_state();
  ::Protocol::hype_move_state move_state() const;
  void set_move_state(::Protocol::hype_move_state value);
  private:
  ::Protocol::hype_move_state _internal_move_state() const;
  void _internal_set_move_state(::Protocol::hype_move_state value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.hyps_pos_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float x_;
    float y_;
    float z_;
    float yaw_;
    int move_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class hyps_object_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.hyps_object_info) */ {
 public:
  inline hyps_object_info() : hyps_object_info(nullptr) {}
  ~hyps_object_info() override;
  explicit PROTOBUF_CONSTEXPR hyps_object_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hyps_object_info(const hyps_object_info& from);
  hyps_object_info(hyps_object_info&& from) noexcept
    : hyps_object_info() {
    *this = ::std::move(from);
  }

  inline hyps_object_info& operator=(const hyps_object_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline hyps_object_info& operator=(hyps_object_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hyps_object_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const hyps_object_info* internal_default_instance() {
    return reinterpret_cast<const hyps_object_info*>(
               &_hyps_object_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(hyps_object_info& a, hyps_object_info& b) {
    a.Swap(&b);
  }
  inline void Swap(hyps_object_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hyps_object_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hyps_object_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hyps_object_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const hyps_object_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const hyps_object_info& from) {
    hyps_object_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hyps_object_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.hyps_object_info";
  }
  protected:
  explicit hyps_object_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
  };
  // .Protocol.hyps_pos_info pos_info = 3;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::hyps_pos_info& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::hyps_pos_info* release_pos_info();
  ::Protocol::hyps_pos_info* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::hyps_pos_info* pos_info);
  private:
  const ::Protocol::hyps_pos_info& _internal_pos_info() const;
  ::Protocol::hyps_pos_info* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::hyps_pos_info* pos_info);
  ::Protocol::hyps_pos_info* unsafe_arena_release_pos_info();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.hype_object_type object_type = 2;
  void clear_object_type();
  ::Protocol::hype_object_type object_type() const;
  void set_object_type(::Protocol::hype_object_type value);
  private:
  ::Protocol::hype_object_type _internal_object_type() const;
  void _internal_set_object_type(::Protocol::hype_object_type value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.hyps_object_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::hyps_pos_info* pos_info_;
    uint64_t object_id_;
    int object_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// hyps_user_info

// uint64 id = 1;
inline void hyps_user_info::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t hyps_user_info::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t hyps_user_info::id() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_user_info.id)
  return _internal_id();
}
inline void hyps_user_info::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void hyps_user_info::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_user_info.id)
}

// string name = 2;
inline void hyps_user_info::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& hyps_user_info::name() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_user_info.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void hyps_user_info::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.hyps_user_info.name)
}
inline std::string* hyps_user_info::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.hyps_user_info.name)
  return _s;
}
inline const std::string& hyps_user_info::_internal_name() const {
  return _impl_.name_.Get();
}
inline void hyps_user_info::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* hyps_user_info::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* hyps_user_info::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.hyps_user_info.name)
  return _impl_.name_.Release();
}
inline void hyps_user_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.hyps_user_info.name)
}

// .Protocol.hype_user user_type = 3;
inline void hyps_user_info::clear_user_type() {
  _impl_.user_type_ = 0;
}
inline ::Protocol::hype_user hyps_user_info::_internal_user_type() const {
  return static_cast< ::Protocol::hype_user >(_impl_.user_type_);
}
inline ::Protocol::hype_user hyps_user_info::user_type() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_user_info.user_type)
  return _internal_user_type();
}
inline void hyps_user_info::_internal_set_user_type(::Protocol::hype_user value) {
  
  _impl_.user_type_ = value;
}
inline void hyps_user_info::set_user_type(::Protocol::hype_user value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_user_info.user_type)
}

// -------------------------------------------------------------------

// hyps_pos_info

// uint64 object_id = 1;
inline void hyps_pos_info::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t hyps_pos_info::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t hyps_pos_info::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.object_id)
  return _internal_object_id();
}
inline void hyps_pos_info::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void hyps_pos_info::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.object_id)
}

// float x = 2;
inline void hyps_pos_info::clear_x() {
  _impl_.x_ = 0;
}
inline float hyps_pos_info::_internal_x() const {
  return _impl_.x_;
}
inline float hyps_pos_info::x() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.x)
  return _internal_x();
}
inline void hyps_pos_info::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void hyps_pos_info::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.x)
}

// float y = 3;
inline void hyps_pos_info::clear_y() {
  _impl_.y_ = 0;
}
inline float hyps_pos_info::_internal_y() const {
  return _impl_.y_;
}
inline float hyps_pos_info::y() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.y)
  return _internal_y();
}
inline void hyps_pos_info::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void hyps_pos_info::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.y)
}

// float z = 4;
inline void hyps_pos_info::clear_z() {
  _impl_.z_ = 0;
}
inline float hyps_pos_info::_internal_z() const {
  return _impl_.z_;
}
inline float hyps_pos_info::z() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.z)
  return _internal_z();
}
inline void hyps_pos_info::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void hyps_pos_info::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.z)
}

// float yaw = 5;
inline void hyps_pos_info::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float hyps_pos_info::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float hyps_pos_info::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.yaw)
  return _internal_yaw();
}
inline void hyps_pos_info::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void hyps_pos_info::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.yaw)
}

// .Protocol.hype_move_state move_state = 6;
inline void hyps_pos_info::clear_move_state() {
  _impl_.move_state_ = 0;
}
inline ::Protocol::hype_move_state hyps_pos_info::_internal_move_state() const {
  return static_cast< ::Protocol::hype_move_state >(_impl_.move_state_);
}
inline ::Protocol::hype_move_state hyps_pos_info::move_state() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_pos_info.move_state)
  return _internal_move_state();
}
inline void hyps_pos_info::_internal_set_move_state(::Protocol::hype_move_state value) {
  
  _impl_.move_state_ = value;
}
inline void hyps_pos_info::set_move_state(::Protocol::hype_move_state value) {
  _internal_set_move_state(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_pos_info.move_state)
}

// -------------------------------------------------------------------

// hyps_object_info

// uint64 object_id = 1;
inline void hyps_object_info::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t hyps_object_info::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t hyps_object_info::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_object_info.object_id)
  return _internal_object_id();
}
inline void hyps_object_info::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void hyps_object_info::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_object_info.object_id)
}

// .Protocol.hype_object_type object_type = 2;
inline void hyps_object_info::clear_object_type() {
  _impl_.object_type_ = 0;
}
inline ::Protocol::hype_object_type hyps_object_info::_internal_object_type() const {
  return static_cast< ::Protocol::hype_object_type >(_impl_.object_type_);
}
inline ::Protocol::hype_object_type hyps_object_info::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_object_info.object_type)
  return _internal_object_type();
}
inline void hyps_object_info::_internal_set_object_type(::Protocol::hype_object_type value) {
  
  _impl_.object_type_ = value;
}
inline void hyps_object_info::set_object_type(::Protocol::hype_object_type value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.hyps_object_info.object_type)
}

// .Protocol.hyps_pos_info pos_info = 3;
inline bool hyps_object_info::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool hyps_object_info::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void hyps_object_info::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::hyps_pos_info& hyps_object_info::_internal_pos_info() const {
  const ::Protocol::hyps_pos_info* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::hyps_pos_info&>(
      ::Protocol::_hyps_pos_info_default_instance_);
}
inline const ::Protocol::hyps_pos_info& hyps_object_info::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.hyps_object_info.pos_info)
  return _internal_pos_info();
}
inline void hyps_object_info::unsafe_arena_set_allocated_pos_info(
    ::Protocol::hyps_pos_info* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.hyps_object_info.pos_info)
}
inline ::Protocol::hyps_pos_info* hyps_object_info::release_pos_info() {
  
  ::Protocol::hyps_pos_info* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::hyps_pos_info* hyps_object_info::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.hyps_object_info.pos_info)
  
  ::Protocol::hyps_pos_info* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::hyps_pos_info* hyps_object_info::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::hyps_pos_info>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::hyps_pos_info* hyps_object_info::mutable_pos_info() {
  ::Protocol::hyps_pos_info* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.hyps_object_info.pos_info)
  return _msg;
}
inline void hyps_object_info::set_allocated_pos_info(::Protocol::hyps_pos_info* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.hyps_object_info.pos_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
